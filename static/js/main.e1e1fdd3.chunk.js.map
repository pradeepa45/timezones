{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","updateSelectedTimeZone","event","value","setState","selectedTimezone","document","getElementById","state","axios","get","then","response","dts","data","datetime","split","ts","slice","catch","error","console","log","timezones","dataFetched","currentTimeInTimezone","this","another","map","timezone","key","text","Segment","size","textAlign","fluid","id","Header","as","Container","verticalAlign","Grid","Column","padded","Form","success","Message","header","content","Field","Select","options","label","placeholder","onChange","Group","readOnly","Input","width","icon","Icon","name","loading","Content","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e1e1fdd3.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\nimport { Message, Icon, Segment, Form, Grid, Header, Container } from 'semantic-ui-react';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      timezones: [],\n      dataFetched: false,\n      selectedTimezone: null,\n      currentTimeInTimezone: null\n    }\n  }\n\n  componentDidMount() {\n    const apiUrl1 = 'http://worldtimeapi.org/api/timezones'\n    axios.get(apiUrl1)\n      .then((response) => {\n        // console.log(response.data);\n        this.setState({\n          dataFetched: true,\n          timezones: response.data\n        })\n      })\n      .catch(error => {\n        console.log('error', error)\n      })\n  }\n\n  updateSelectedTimeZone = (event, value) => {\n    // console.log(value.value);\n    this.setState({\n      selectedTimezone: value.value\n    }, () => {\n      var box1 = document.getElementById('selectedTimezone');\n      // console.log(box1);\n      box1.value = this.state.selectedTimezone;\n      const apiUrl2 = 'http://worldtimeapi.org/api/timezone/'\n      axios.get(apiUrl2 + `${this.state.selectedTimezone}`)\n        // console.log(this.state.selectedTimezone)\n        .then((response) => {\n          // console.log(response.data);\n          var dt = response.data.datetime;\n          let dts = dt.split('T');\n          // console.log(dts);\n          var date = document.getElementById('date');\n          date.value = dts[0];\n          var ts = dts[1];\n          // console.log(ts);\n          var timec = document.getElementById('c-time');\n          timec.value = ts.slice(0, 8);\n          var off = document.getElementById('utc-offset')\n          off.value = ts.slice(15);\n        })\n        .catch(error => console.log('error', error));\n    });\n\n  }\n\n  render() {\n    const { timezones, dataFetched, selectedTimezone, currentTimeInTimezone } = this.state;\n    const another = timezones.map((timezone => {\n      return {\n        key: timezone,\n        text: timezone,\n        value: timezone\n      }\n    }));\n    // console.log(selectedTimezone);\n    if (dataFetched) {\n      return (\n        <div>\n            <Segment size='large' textAlign='left' fluid id='myHeader'>\n              <Header as='h1'>TimeZones</Header>\n            </Segment>\n          <Container verticalAlign='middle' id='dataFetchedBox'>\n            <Grid.Column></Grid.Column>\n            <Grid.Column>\n              <Segment padded id='onemore'>\n\n                <Segment>\n                  <Grid>\n                    <Grid.Column as={Form} success>\n                    <Message \n                      success\n                      header='Data Fetched!' \n                      content='Now, select your Time Zone.'\n                      />\n                      <Form.Field>\n                        <Form.Select\n                          options={another}\n                          label='Select your Time Zone'\n                          fluid\n                          placeholder='Select your timezone'\n                          onChange={this.updateSelectedTimeZone}\n                        />\n                        {/* <Form.Button> Done </Form.Button> */}\n                      </Form.Field>\n                      <Form.Group readOnly>\n                        <Form.Input id='selectedTimezone' label='Selected Time Zone' width={5}>\n\n                        </Form.Input>\n                        <Form.Input id='date' label='Current Date' width={5} readOnly>\n\n                        </Form.Input>\n                        <Form.Input id='c-time' label='Current Time' width={5} readOnly>\n\n                        </Form.Input>\n                        <Form.Input id='utc-offset' label='UTC Offset' width={5} readOnly>\n\n                        </Form.Input>\n                      </Form.Group>\n                    </Grid.Column>\n                  </Grid>\n                </Segment>\n              </Segment>\n            </Grid.Column>\n            <Grid.Column></Grid.Column>\n          </Container>\n        </div>\n      );\n    }\n    else {\n      return (\n        <div id='loadingTime'>\n            <Segment size='large' textAlign='left' id='myHeader' fluid>\n              <Header as='h1'>TimeZones</Header>\n            </Segment>\n          <Container id='loader-box'>\n            <Grid.Column>  \n              <Message icon>\n                <Icon name='circle notched' loading />\n                <Message.Content>\n                  <Message.Header>Just one second</Message.Header>\n                We are fetching that content for you.\n              </Message.Content>\n              </Message>\n            </Grid.Column>\n          </Container>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}